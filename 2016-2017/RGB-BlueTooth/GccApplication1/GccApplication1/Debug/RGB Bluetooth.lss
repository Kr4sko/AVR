
RGB Bluetooth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000106  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000af  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000071  00000000  00000000  00000259  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000dc  00000000  00000000  000002ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  000003a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000157  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000034  00000000  00000000  00000523  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  00000557  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	66 c0       	rjmp	.+204    	; 0x102 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
{
	unsigned char slajder_numer, slajder_wartosc;
	
	
	//wlaczanie pinow
	DDRB	|=	(1<<PB1)	|	(1<<PB2)	|	(1<<PB3); //kierunek pinow
  38:	87 b3       	in	r24, 0x17	; 23
  3a:	8e 60       	ori	r24, 0x0E	; 14
  3c:	87 bb       	out	0x17, r24	; 23
	PORTB	|=	(1<<PB1)	|	(1<<PB2)	|	(1<<PB3);	
  3e:	88 b3       	in	r24, 0x18	; 24
  40:	8e 60       	ori	r24, 0x0E	; 14
  42:	88 bb       	out	0x18, r24	; 24
	
	DDRD	|=	(1<<PD2);
  44:	8a 9a       	sbi	0x11, 2	; 17
	
	
	//Bluetooth	
	UCSRA	|= (1<<U2X);
  46:	59 9a       	sbi	0x0b, 1	; 11
	UBRRL = 12;
  48:	8c e0       	ldi	r24, 0x0C	; 12
  4a:	89 b9       	out	0x09, r24	; 9
	UCSRB	|= (1<<RXEN)|(1<<TXEN);
  4c:	8a b1       	in	r24, 0x0a	; 10
  4e:	88 61       	ori	r24, 0x18	; 24
  50:	8a b9       	out	0x0a, r24	; 10
	UCSRC	|= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
  52:	80 b5       	in	r24, 0x20	; 32
  54:	86 68       	ori	r24, 0x86	; 134
  56:	80 bd       	out	0x20, r24	; 32
	DDRD	|=	(1<<PD1);
  58:	89 9a       	sbi	0x11, 1	; 17
		
	
    //TIMER 1
	TCCR1A	|=	(1<<WGM10);						//fast PWM 
  5a:	8f b5       	in	r24, 0x2f	; 47
  5c:	81 60       	ori	r24, 0x01	; 1
  5e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B	|=	(1<<WGM12);						//fast PWM
  60:	8e b5       	in	r24, 0x2e	; 46
  62:	88 60       	ori	r24, 0x08	; 8
  64:	8e bd       	out	0x2e, r24	; 46
	TCCR1A	|=	(1<<COM1A1)	|	(1<<COM1A0);	//inverting mode kanal A
  66:	8f b5       	in	r24, 0x2f	; 47
  68:	80 6c       	ori	r24, 0xC0	; 192
  6a:	8f bd       	out	0x2f, r24	; 47
	TCCR1A	|=	(1<<COM1B1)	|	(1<<COM1B0);	//inverting mode kanal B
  6c:	8f b5       	in	r24, 0x2f	; 47
  6e:	80 63       	ori	r24, 0x30	; 48
  70:	8f bd       	out	0x2f, r24	; 47
	TCCR1B	|=	(1<<CS11);						//preskaler
  72:	8e b5       	in	r24, 0x2e	; 46
  74:	82 60       	ori	r24, 0x02	; 2
  76:	8e bd       	out	0x2e, r24	; 46
	DDRB	|=	(1<<PB1)	|	(1<<PB2);
  78:	87 b3       	in	r24, 0x17	; 23
  7a:	86 60       	ori	r24, 0x06	; 6
  7c:	87 bb       	out	0x17, r24	; 23
	
	
	//TIMER 2
	TCCR2	|=	(1<<WGM21)	|	(1<<WGM20); //Fast PWM 8 bit
  7e:	85 b5       	in	r24, 0x25	; 37
  80:	88 64       	ori	r24, 0x48	; 72
  82:	85 bd       	out	0x25, r24	; 37
	TCCR2	|=	(1<<CS21);					//preskaler
  84:	85 b5       	in	r24, 0x25	; 37
  86:	82 60       	ori	r24, 0x02	; 2
  88:	85 bd       	out	0x25, r24	; 37
	TCCR2	|=	(1<<COM21)	|	(1<<COM20);	//inverting mode
  8a:	85 b5       	in	r24, 0x25	; 37
  8c:	80 63       	ori	r24, 0x30	; 48
  8e:	85 bd       	out	0x25, r24	; 37
	DDRB	|=	(1<<PB3);					//OC2 na wyj띾ie
  90:	bb 9a       	sbi	0x17, 3	; 23
	PORTB	|=	(1<<PB3); // ustaw 1 aby domyslnie dioda by쓰 wyl젺zona
  92:	c3 9a       	sbi	0x18, 3	; 24
				else
				{
					TCCR1A	|=	(1<<COM1B1)	|	(1<<COM1B0);	//w쓰cz PWM inverting mode
				}
			}
			PORTD ^=	(1<<PD2);
  94:	34 e0       	ldi	r19, 0x04	; 4
	PORTB	|=	(1<<PB3); // ustaw 1 aby domyslnie dioda by쓰 wyl젺zona
	
	while(1)
    {
        
		if(UCSRA & (1<<RXC))
  96:	5f 9b       	sbis	0x0b, 7	; 11
  98:	fe cf       	rjmp	.-4      	; 0x96 <__SREG__+0x57>
		{
			slajder_numer = UDR;
  9a:	8c b1       	in	r24, 0x0c	; 12
			while(!(UCSRA & (1<<RXC))); //zaczekaj na drugi bajt
  9c:	5f 9b       	sbis	0x0b, 7	; 11
  9e:	fe cf       	rjmp	.-4      	; 0x9c <__SREG__+0x5d>
			slajder_wartosc = UDR;
  a0:	2c b1       	in	r18, 0x0c	; 12
			
			
			
			if(slajder_numer == 1)
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	71 f4       	brne	.+28     	; 0xc2 <__SREG__+0x83>
			{
				LED_ZIELONY_PWM = slajder_wartosc;
  a6:	82 2f       	mov	r24, r18
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	9b bd       	out	0x2b, r25	; 43
  ac:	8a bd       	out	0x2a, r24	; 42
				
				if(slajder_wartosc == 0)
  ae:	21 11       	cpse	r18, r1
  b0:	04 c0       	rjmp	.+8      	; 0xba <__SREG__+0x7b>
				{
					TCCR1A	&=	 ~((1<<COM1A1)	|	(1<<COM1A0));	//wy씿cz PWM
  b2:	8f b5       	in	r24, 0x2f	; 47
  b4:	8f 73       	andi	r24, 0x3F	; 63
  b6:	8f bd       	out	0x2f, r24	; 47
  b8:	20 c0       	rjmp	.+64     	; 0xfa <__SREG__+0xbb>
				}
				else
				{
					TCCR1A	|=	(1<<COM1A1)	|	(1<<COM1A0);	//w쓰cz PWM inverting mode
  ba:	8f b5       	in	r24, 0x2f	; 47
  bc:	80 6c       	ori	r24, 0xC0	; 192
  be:	8f bd       	out	0x2f, r24	; 47
  c0:	1c c0       	rjmp	.+56     	; 0xfa <__SREG__+0xbb>
				}
				
			}
			else if(slajder_numer == 2)
  c2:	82 30       	cpi	r24, 0x02	; 2
  c4:	59 f4       	brne	.+22     	; 0xdc <__SREG__+0x9d>
			{
				LED_CZEROWNY_PWM = slajder_wartosc;
  c6:	23 bd       	out	0x23, r18	; 35
				
				if(slajder_wartosc == 0)
  c8:	21 11       	cpse	r18, r1
  ca:	04 c0       	rjmp	.+8      	; 0xd4 <__SREG__+0x95>
				{
					TCCR2	&=	 ~((1<<COM21)	|	(1<<COM20));	//wy씿cz PWM
  cc:	85 b5       	in	r24, 0x25	; 37
  ce:	8f 7c       	andi	r24, 0xCF	; 207
  d0:	85 bd       	out	0x25, r24	; 37
  d2:	13 c0       	rjmp	.+38     	; 0xfa <__SREG__+0xbb>
				}
				else
				{
					TCCR2	|=	(1<<COM21)	|	(1<<COM20);	//w쓰cz PWM inverting mode
  d4:	85 b5       	in	r24, 0x25	; 37
  d6:	80 63       	ori	r24, 0x30	; 48
  d8:	85 bd       	out	0x25, r24	; 37
  da:	0f c0       	rjmp	.+30     	; 0xfa <__SREG__+0xbb>
				}
				
				
			}
			else if(slajder_numer == 3)
  dc:	83 30       	cpi	r24, 0x03	; 3
  de:	69 f4       	brne	.+26     	; 0xfa <__SREG__+0xbb>
			{
				LED_NIEBIESKI_PWM = slajder_wartosc;
  e0:	82 2f       	mov	r24, r18
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	99 bd       	out	0x29, r25	; 41
  e6:	88 bd       	out	0x28, r24	; 40
				
				if(slajder_wartosc == 0)
  e8:	21 11       	cpse	r18, r1
  ea:	04 c0       	rjmp	.+8      	; 0xf4 <__SREG__+0xb5>
				{
					TCCR1A	&=	 ~((1<<COM1B1)	|	(1<<COM1B0));	//wy씿cz PWM
  ec:	8f b5       	in	r24, 0x2f	; 47
  ee:	8f 7c       	andi	r24, 0xCF	; 207
  f0:	8f bd       	out	0x2f, r24	; 47
  f2:	03 c0       	rjmp	.+6      	; 0xfa <__SREG__+0xbb>
				}
				else
				{
					TCCR1A	|=	(1<<COM1B1)	|	(1<<COM1B0);	//w쓰cz PWM inverting mode
  f4:	8f b5       	in	r24, 0x2f	; 47
  f6:	80 63       	ori	r24, 0x30	; 48
  f8:	8f bd       	out	0x2f, r24	; 47
				}
			}
			PORTD ^=	(1<<PD2);
  fa:	82 b3       	in	r24, 0x12	; 18
  fc:	83 27       	eor	r24, r19
  fe:	82 bb       	out	0x12, r24	; 18
 100:	ca cf       	rjmp	.-108    	; 0x96 <__SREG__+0x57>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
