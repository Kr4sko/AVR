
JoyStick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000014  00800060  00800060  00000216  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002a4  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001cf  00000000  00000000  00000522  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000193  00000000  00000000  000006f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000007c  00000000  00000000  00000884  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001c0  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000e8  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00000ba8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	38 c0       	rjmp	.+112    	; 0x7a <__vector_4>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__vector_8>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__vector_9>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a4 37       	cpi	r26, 0x74	; 116
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	25 d0       	rcall	.+74     	; 0x8e <main>
  44:	ac c0       	rjmp	.+344    	; 0x19e <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_9>:

char bufor_lcd [20];


ISR(TIMER0_OVF_vect)
{
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
	//if(OCR1A >= SERWO_MAX)  krok = -1;
	//if(OCR1A <= SERWO_MIN)	krok = 1;
		
	//OCR1A += krok;
	
}
  52:	0f 90       	pop	r0
  54:	0f be       	out	0x3f, r0	; 63
  56:	0f 90       	pop	r0
  58:	1f 90       	pop	r1
  5a:	18 95       	reti

0000005c <__vector_8>:

ISR(TIMER1_OVF_vect)
{
  5c:	1f 92       	push	r1
  5e:	0f 92       	push	r0
  60:	0f b6       	in	r0, 0x3f	; 63
  62:	0f 92       	push	r0
  64:	11 24       	eor	r1, r1
  66:	8f 93       	push	r24
	PORTB	^=	(1<<PD7);
  68:	88 b3       	in	r24, 0x18	; 24
  6a:	80 58       	subi	r24, 0x80	; 128
  6c:	88 bb       	out	0x18, r24	; 24
	
	
}
  6e:	8f 91       	pop	r24
  70:	0f 90       	pop	r0
  72:	0f be       	out	0x3f, r0	; 63
  74:	0f 90       	pop	r0
  76:	1f 90       	pop	r1
  78:	18 95       	reti

0000007a <__vector_4>:

ISR(TIMER2_OVF_vect)
{
  7a:	1f 92       	push	r1
  7c:	0f 92       	push	r0
  7e:	0f b6       	in	r0, 0x3f	; 63
  80:	0f 92       	push	r0
  82:	11 24       	eor	r1, r1
	//PORTB	^=	(1<<PB1);
	
}
  84:	0f 90       	pop	r0
  86:	0f be       	out	0x3f, r0	; 63
  88:	0f 90       	pop	r0
  8a:	1f 90       	pop	r1
  8c:	18 95       	reti

0000008e <main>:
int main(void)
{
	unsigned int pomiar;
	signed long x;
	
	DDRB	|=	(1<<PB0);		
  8e:	b8 9a       	sbi	0x17, 0	; 23
	TCCR0	|=	(1<<CS01);	//prescaler 8
  90:	83 b7       	in	r24, 0x33	; 51
  92:	82 60       	ori	r24, 0x02	; 2
  94:	83 bf       	out	0x33, r24	; 51
	TIMSK	|=	(1<<TOIE0);	//w³acz przerwania przepe³nienia timera 0
  96:	89 b7       	in	r24, 0x39	; 57
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	89 bf       	out	0x39, r24	; 57
	
	
	DDRB	|=	(1<<PB1)	|	(1<<PB2);
  9c:	87 b3       	in	r24, 0x17	; 23
  9e:	86 60       	ori	r24, 0x06	; 6
  a0:	87 bb       	out	0x17, r24	; 23
	
	
	//SERWO X
	TCCR1A	|=	(1<<COM1A1);
  a2:	8f b5       	in	r24, 0x2f	; 47
  a4:	80 68       	ori	r24, 0x80	; 128
  a6:	8f bd       	out	0x2f, r24	; 47
	OCR1A	=	SERWO_Y_MIN;	//szerokosc impulsu
  a8:	8c e1       	ldi	r24, 0x1C	; 28
  aa:	92 e0       	ldi	r25, 0x02	; 2
  ac:	9b bd       	out	0x2b, r25	; 43
  ae:	8a bd       	out	0x2a, r24	; 42
	
	
	//SERWO Y PWM
	TCCR1A	|=	(1<<COM1B1);
  b0:	2f b5       	in	r18, 0x2f	; 47
  b2:	20 62       	ori	r18, 0x20	; 32
  b4:	2f bd       	out	0x2f, r18	; 47
	OCR1B	=	SERWO_Y_MIN;
  b6:	99 bd       	out	0x29, r25	; 41
  b8:	88 bd       	out	0x28, r24	; 40


	//timer1 wspólnwe X Y 
	TCCR1A	|=	(1<<WGM11);
  ba:	8f b5       	in	r24, 0x2f	; 47
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	8f bd       	out	0x2f, r24	; 47
	TCCR1B	|=	(1<<WGM12)	|	(1<<WGM13);
  c0:	8e b5       	in	r24, 0x2e	; 46
  c2:	88 61       	ori	r24, 0x18	; 24
  c4:	8e bd       	out	0x2e, r24	; 46
	ICR1	=	19999;
  c6:	8f e1       	ldi	r24, 0x1F	; 31
  c8:	9e e4       	ldi	r25, 0x4E	; 78
  ca:	97 bd       	out	0x27, r25	; 39
  cc:	86 bd       	out	0x26, r24	; 38
	TCCR1B	|=	(1<<CS10);
  ce:	8e b5       	in	r24, 0x2e	; 46
  d0:	81 60       	ori	r24, 0x01	; 1
  d2:	8e bd       	out	0x2e, r24	; 46
	
	
	

	//ADC do odczytu Joystick
	ADMUX	|=	(1<<REFS0);	// AVCC jako napiecie odniesienia
  d4:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA	|=	(1<<ADPS2)	|	(1<<ADPS1)	|	(1<<ADPS0);	// prescaler 128
  d6:	86 b1       	in	r24, 0x06	; 6
  d8:	87 60       	ori	r24, 0x07	; 7
  da:	86 b9       	out	0x06, r24	; 6
	ADCSRA	|=	(1<<ADEN);	// w³acz przetwornik analogowo cyfrowy
  dc:	37 9a       	sbi	0x06, 7	; 6
	
	
	//Bluetooth
	
	UCSRA |= (1<<U2X);
  de:	59 9a       	sbi	0x0b, 1	; 11
	UBRRL = 12;
  e0:	8c e0       	ldi	r24, 0x0C	; 12
  e2:	89 b9       	out	0x09, r24	; 9
	UCSRB |= (1<<RXEN)|(1<<TXEN);
  e4:	8a b1       	in	r24, 0x0a	; 10
  e6:	88 61       	ori	r24, 0x18	; 24
  e8:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
  ea:	80 b5       	in	r24, 0x20	; 32
  ec:	86 68       	ori	r24, 0x86	; 134
  ee:	80 bd       	out	0x20, r24	; 32
	DDRD	|=	(1<<PD1);
  f0:	89 9a       	sbi	0x11, 1	; 17
		
		for(int f=0; f<sizeof(bufor_lcd); f++)
		{
			if(bufor_lcd[f]==0)
			{
				UDR = ' ';
  f2:	c0 e2       	ldi	r28, 0x20	; 32
	
    while(1)
    {
				
		
		ADMUX	|=	(1<<MUX0);
  f4:	38 9a       	sbi	0x07, 0	; 7
		ADMUX	&=	~(1<<MUX1);		
  f6:	39 98       	cbi	0x07, 1	; 7
		ADCSRA	|=	(1<<ADSC);	// wystartuj pomiar
  f8:	36 9a       	sbi	0x06, 6	; 6
		while(ADCSRA & (1<<ADSC)); //czekaj az pomiar zostanie zakonczony
  fa:	36 99       	sbic	0x06, 6	; 6
  fc:	fe cf       	rjmp	.-4      	; 0xfa <main+0x6c>
		
		
		pomiar	=	(SERWO_Y_MIN + (ADC * (SERWO_Y_MAX -SERWO_Y_MIN))/1024);
  fe:	84 b1       	in	r24, 0x04	; 4
 100:	95 b1       	in	r25, 0x05	; 5
				//deadzone JoyStick
		}
		else if(pomiar < JOY_Y_DZ_MIN)
		{
			//wychylenie w lewo
			if(OCR1A - x < SERWO_Y_MIN)
 102:	8a b5       	in	r24, 0x2a	; 42
 104:	9b b5       	in	r25, 0x2b	; 43
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 106:	4a e0       	ldi	r20, 0x0A	; 10
 108:	60 e6       	ldi	r22, 0x60	; 96
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	81 ee       	ldi	r24, 0xE1	; 225
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	13 d0       	rcall	.+38     	; 0x138 <__itoa_ncheck>
 112:	e0 e6       	ldi	r30, 0x60	; 96
 114:	f0 e0       	ldi	r31, 0x00	; 0
		//_delay_ms(1000);
		
		itoa(x, bufor_lcd, 10);
		
		
		for(int f=0; f<sizeof(bufor_lcd); f++)
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	e4 37       	cpi	r30, 0x74	; 116
 11a:	f9 07       	cpc	r31, r25
 11c:	59 f3       	breq	.-42     	; 0xf4 <main+0x66>
		{
			if(bufor_lcd[f]==0)
 11e:	81 91       	ld	r24, Z+
 120:	81 11       	cpse	r24, r1
 122:	02 c0       	rjmp	.+4      	; 0x128 <main+0x9a>
			{
				UDR = ' ';
 124:	cc b9       	out	0x0c, r28	; 12
				break;
 126:	e6 cf       	rjmp	.-52     	; 0xf4 <main+0x66>
			}
			UDR = bufor_lcd[f];
 128:	8c b9       	out	0x0c, r24	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	83 ec       	ldi	r24, 0xC3	; 195
 12c:	99 e0       	ldi	r25, 0x09	; 9
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <main+0xa0>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0xa6>
 134:	00 00       	nop
 136:	ef cf       	rjmp	.-34     	; 0x116 <main+0x88>

00000138 <__itoa_ncheck>:
 138:	bb 27       	eor	r27, r27
 13a:	4a 30       	cpi	r20, 0x0A	; 10
 13c:	31 f4       	brne	.+12     	; 0x14a <__itoa_ncheck+0x12>
 13e:	99 23       	and	r25, r25
 140:	22 f4       	brpl	.+8      	; 0x14a <__itoa_ncheck+0x12>
 142:	bd e2       	ldi	r27, 0x2D	; 45
 144:	90 95       	com	r25
 146:	81 95       	neg	r24
 148:	9f 4f       	sbci	r25, 0xFF	; 255
 14a:	01 c0       	rjmp	.+2      	; 0x14e <__utoa_common>

0000014c <__utoa_ncheck>:
 14c:	bb 27       	eor	r27, r27

0000014e <__utoa_common>:
 14e:	fb 01       	movw	r30, r22
 150:	55 27       	eor	r21, r21
 152:	aa 27       	eor	r26, r26
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	aa 1f       	adc	r26, r26
 15a:	a4 17       	cp	r26, r20
 15c:	10 f0       	brcs	.+4      	; 0x162 <__utoa_common+0x14>
 15e:	a4 1b       	sub	r26, r20
 160:	83 95       	inc	r24
 162:	50 51       	subi	r21, 0x10	; 16
 164:	b9 f7       	brne	.-18     	; 0x154 <__utoa_common+0x6>
 166:	a0 5d       	subi	r26, 0xD0	; 208
 168:	aa 33       	cpi	r26, 0x3A	; 58
 16a:	08 f0       	brcs	.+2      	; 0x16e <__utoa_common+0x20>
 16c:	a9 5d       	subi	r26, 0xD9	; 217
 16e:	a1 93       	st	Z+, r26
 170:	00 97       	sbiw	r24, 0x00	; 0
 172:	79 f7       	brne	.-34     	; 0x152 <__utoa_common+0x4>
 174:	b1 11       	cpse	r27, r1
 176:	b1 93       	st	Z+, r27
 178:	11 92       	st	Z+, r1
 17a:	cb 01       	movw	r24, r22
 17c:	00 c0       	rjmp	.+0      	; 0x17e <strrev>

0000017e <strrev>:
 17e:	dc 01       	movw	r26, r24
 180:	fc 01       	movw	r30, r24
 182:	67 2f       	mov	r22, r23
 184:	71 91       	ld	r23, Z+
 186:	77 23       	and	r23, r23
 188:	e1 f7       	brne	.-8      	; 0x182 <strrev+0x4>
 18a:	32 97       	sbiw	r30, 0x02	; 2
 18c:	04 c0       	rjmp	.+8      	; 0x196 <strrev+0x18>
 18e:	7c 91       	ld	r23, X
 190:	6d 93       	st	X+, r22
 192:	70 83       	st	Z, r23
 194:	62 91       	ld	r22, -Z
 196:	ae 17       	cp	r26, r30
 198:	bf 07       	cpc	r27, r31
 19a:	c8 f3       	brcs	.-14     	; 0x18e <strrev+0x10>
 19c:	08 95       	ret

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
