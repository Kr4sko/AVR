
dalmierz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000c  00800060  00800060  00000222  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000222  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001d0  00000000  00000000  0000027a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000010e  00000000  00000000  0000044a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000170  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000054  00000000  00000000  000006c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001a1  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000063  00000000  00000000  000008bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1f c0       	rjmp	.+62     	; 0x48 <__vector_4>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	ac 36       	cpi	r26, 0x6C	; 108
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	27 d0       	rcall	.+78     	; 0x92 <main>
  44:	b2 c0       	rjmp	.+356    	; 0x1aa <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_4>:
volatile unsigned long licznik_przepelnien;
unsigned long ilosc_impulsow;
unsigned long odleglosc;

ISR(TIMER2_OVF_vect)
{
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
  52:	8f 93       	push	r24
  54:	9f 93       	push	r25
  56:	af 93       	push	r26
  58:	bf 93       	push	r27
	licznik_przepelnien++;
  5a:	80 91 68 00 	lds	r24, 0x0068
  5e:	90 91 69 00 	lds	r25, 0x0069
  62:	a0 91 6a 00 	lds	r26, 0x006A
  66:	b0 91 6b 00 	lds	r27, 0x006B
  6a:	01 96       	adiw	r24, 0x01	; 1
  6c:	a1 1d       	adc	r26, r1
  6e:	b1 1d       	adc	r27, r1
  70:	80 93 68 00 	sts	0x0068, r24
  74:	90 93 69 00 	sts	0x0069, r25
  78:	a0 93 6a 00 	sts	0x006A, r26
  7c:	b0 93 6b 00 	sts	0x006B, r27
}
  80:	bf 91       	pop	r27
  82:	af 91       	pop	r26
  84:	9f 91       	pop	r25
  86:	8f 91       	pop	r24
  88:	0f 90       	pop	r0
  8a:	0f be       	out	0x3f, r0	; 63
  8c:	0f 90       	pop	r0
  8e:	1f 90       	pop	r1
  90:	18 95       	reti

00000092 <main>:

int main(void)
{
	//USART
	
	UCSRA |= (1 << U2X);
  92:	59 9a       	sbi	0x0b, 1	; 11
	UBRRL = 12;
  94:	8c e0       	ldi	r24, 0x0C	; 12
  96:	89 b9       	out	0x09, r24	; 9
	UCSRC |= (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
  98:	80 b5       	in	r24, 0x20	; 32
  9a:	86 68       	ori	r24, 0x86	; 134
  9c:	80 bd       	out	0x20, r24	; 32
	UCSRB |= (1 << RXEN) | (1 << TXEN);
  9e:	8a b1       	in	r24, 0x0a	; 10
  a0:	88 61       	ori	r24, 0x18	; 24
  a2:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << PD1);
  a4:	89 9a       	sbi	0x11, 1	; 17
		
	DDRC |= (1 << PC4);
  a6:	a4 9a       	sbi	0x14, 4	; 20
	
	//dalmierz
	DDRC |= (1 << PC3);
  a8:	a3 9a       	sbi	0x14, 3	; 20
	TIMSK |= (1<<TOIE0);
  aa:	89 b7       	in	r24, 0x39	; 57
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	89 bf       	out	0x39, r24	; 57
	
	//timer 2
	TIMSK |= (1<<TOIE2);
  b0:	89 b7       	in	r24, 0x39	; 57
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	89 bf       	out	0x39, r24	; 57
	
	sei();
  b6:	78 94       	sei
	
    while(1)
    {
		
		licznik_przepelnien = 0;
  b8:	10 92 68 00 	sts	0x0068, r1
  bc:	10 92 69 00 	sts	0x0069, r1
  c0:	10 92 6a 00 	sts	0x006A, r1
  c4:	10 92 6b 00 	sts	0x006B, r1
		TCNT2 = 0;
  c8:	14 bc       	out	0x24, r1	; 36
		
		//wyzeruj na wszelki wypadek pin echo
		DDRC |= (1<<PC2);
  ca:	a2 9a       	sbi	0x14, 2	; 20
		DDRC &= ~(1<<PC2);
  cc:	a2 98       	cbi	0x14, 2	; 20
		
		
        //rozpoczecie pomiaru
		PORTC |= (1 << PC3);
  ce:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	22 e0       	ldi	r18, 0x02	; 2
  d2:	2a 95       	dec	r18
  d4:	f1 f7       	brne	.-4      	; 0xd2 <main+0x40>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x46>
		_delay_us(8);
		PORTC &= ~(1 << PC3);
  d8:	ab 98       	cbi	0x15, 3	; 21
				
		while(!(PINC & (1 << PC2))); //czekaj dopoki stan niski na pinie echo
  da:	9a 9b       	sbis	0x13, 2	; 19
  dc:	fe cf       	rjmp	.-4      	; 0xda <main+0x48>
		
		//wystartuj timer
		TCCR2 |= (1 << CS20);
  de:	85 b5       	in	r24, 0x25	; 37
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	85 bd       	out	0x25, r24	; 37

		while(PINC & (1 << PC2)); //czekaj dopoki stan wysokui na pinie echo
  e4:	9a 99       	sbic	0x13, 2	; 19
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <main+0x52>
				

		TCCR2 &= ~(1<<CS20); //zatrzymaj timer
  e8:	85 b5       	in	r24, 0x25	; 37
  ea:	8e 7f       	andi	r24, 0xFE	; 254
  ec:	85 bd       	out	0x25, r24	; 37

		
		ilosc_impulsow = licznik_przepelnien * 256 + TCNT2;
  ee:	80 91 68 00 	lds	r24, 0x0068
  f2:	90 91 69 00 	lds	r25, 0x0069
  f6:	a0 91 6a 00 	lds	r26, 0x006A
  fa:	b0 91 6b 00 	lds	r27, 0x006B
  fe:	24 b5       	in	r18, 0x24	; 36
 100:	ba 2f       	mov	r27, r26
 102:	a9 2f       	mov	r26, r25
 104:	98 2f       	mov	r25, r24
 106:	88 27       	eor	r24, r24
 108:	82 0f       	add	r24, r18
 10a:	91 1d       	adc	r25, r1
 10c:	a1 1d       	adc	r26, r1
 10e:	b1 1d       	adc	r27, r1
		
		ilosc_impulsow /= 2; //czujnik mierzy odleglosc tam i z powrotem
 110:	b6 95       	lsr	r27
 112:	a7 95       	ror	r26
 114:	97 95       	ror	r25
 116:	87 95       	ror	r24
 118:	80 93 64 00 	sts	0x0064, r24
 11c:	90 93 65 00 	sts	0x0065, r25
 120:	a0 93 66 00 	sts	0x0066, r26
 124:	b0 93 67 00 	sts	0x0067, r27
		
		odleglosc = ilosc_impulsow;
 128:	80 93 60 00 	sts	0x0060, r24
 12c:	90 93 61 00 	sts	0x0061, r25
 130:	a0 93 62 00 	sts	0x0062, r26
 134:	b0 93 63 00 	sts	0x0063, r27
		
		//odleglosc = 240;
		while(!(UCSRA & (1 << UDRE)));
 138:	5d 9b       	sbis	0x0b, 5	; 11
 13a:	fe cf       	rjmp	.-4      	; 0x138 <main+0xa6>
		UDR = odleglosc;
 13c:	8c b9       	out	0x0c, r24	; 12
		while(!(UCSRA & (1 << UDRE)));
 13e:	5d 9b       	sbis	0x0b, 5	; 11
 140:	fe cf       	rjmp	.-4      	; 0x13e <main+0xac>
		UDR = odleglosc >> 8;
 142:	80 91 60 00 	lds	r24, 0x0060
 146:	90 91 61 00 	lds	r25, 0x0061
 14a:	a0 91 62 00 	lds	r26, 0x0062
 14e:	b0 91 63 00 	lds	r27, 0x0063
 152:	89 2f       	mov	r24, r25
 154:	9a 2f       	mov	r25, r26
 156:	ab 2f       	mov	r26, r27
 158:	bb 27       	eor	r27, r27
 15a:	8c b9       	out	0x0c, r24	; 12
		while(!(UCSRA & (1 << UDRE)));
 15c:	5d 9b       	sbis	0x0b, 5	; 11
 15e:	fe cf       	rjmp	.-4      	; 0x15c <main+0xca>
		UDR = odleglosc >> 16;
 160:	80 91 60 00 	lds	r24, 0x0060
 164:	90 91 61 00 	lds	r25, 0x0061
 168:	a0 91 62 00 	lds	r26, 0x0062
 16c:	b0 91 63 00 	lds	r27, 0x0063
 170:	cd 01       	movw	r24, r26
 172:	aa 27       	eor	r26, r26
 174:	bb 27       	eor	r27, r27
 176:	8c b9       	out	0x0c, r24	; 12
		while(!(UCSRA & (1 << UDRE)));
 178:	5d 9b       	sbis	0x0b, 5	; 11
 17a:	fe cf       	rjmp	.-4      	; 0x178 <main+0xe6>
		UDR = odleglosc >> 24;
 17c:	80 91 60 00 	lds	r24, 0x0060
 180:	90 91 61 00 	lds	r25, 0x0061
 184:	a0 91 62 00 	lds	r26, 0x0062
 188:	b0 91 63 00 	lds	r27, 0x0063
 18c:	8b 2f       	mov	r24, r27
 18e:	99 27       	eor	r25, r25
 190:	aa 27       	eor	r26, r26
 192:	bb 27       	eor	r27, r27
 194:	8c b9       	out	0x0c, r24	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	8f e3       	ldi	r24, 0x3F	; 63
 198:	9d e0       	ldi	r25, 0x0D	; 13
 19a:	23 e0       	ldi	r18, 0x03	; 3
 19c:	81 50       	subi	r24, 0x01	; 1
 19e:	90 40       	sbci	r25, 0x00	; 0
 1a0:	20 40       	sbci	r18, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0x10a>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x114>
 1a6:	00 00       	nop
 1a8:	87 cf       	rjmp	.-242    	; 0xb8 <main+0x26>

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
