
wyswietlaczSPI_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000083e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000008b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000205  00800060  00800060  000008b2  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000008b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000914  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a99  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bfb  00000000  00000000  00002541  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f12  00000000  00000000  0000313c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c8  00000000  00000000  00004050  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000809  00000000  00000000  00004318  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b14  00000000  00000000  00004b21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00005635  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f3 c1       	rjmp	.+998    	; 0x3e8 <__ctors_end>
   2:	02 c2       	rjmp	.+1028   	; 0x408 <__bad_interrupt>
   4:	01 c2       	rjmp	.+1026   	; 0x408 <__bad_interrupt>
   6:	00 c2       	rjmp	.+1024   	; 0x408 <__bad_interrupt>
   8:	ff c1       	rjmp	.+1022   	; 0x408 <__bad_interrupt>
   a:	fe c1       	rjmp	.+1020   	; 0x408 <__bad_interrupt>
   c:	fd c1       	rjmp	.+1018   	; 0x408 <__bad_interrupt>
   e:	fc c1       	rjmp	.+1016   	; 0x408 <__bad_interrupt>
  10:	fb c1       	rjmp	.+1014   	; 0x408 <__bad_interrupt>
  12:	fa c1       	rjmp	.+1012   	; 0x408 <__bad_interrupt>
  14:	f9 c1       	rjmp	.+1010   	; 0x408 <__bad_interrupt>
  16:	f8 c1       	rjmp	.+1008   	; 0x408 <__bad_interrupt>
  18:	f7 c1       	rjmp	.+1006   	; 0x408 <__bad_interrupt>
  1a:	f6 c1       	rjmp	.+1004   	; 0x408 <__bad_interrupt>
  1c:	f5 c1       	rjmp	.+1002   	; 0x408 <__bad_interrupt>
  1e:	f4 c1       	rjmp	.+1000   	; 0x408 <__bad_interrupt>
  20:	f3 c1       	rjmp	.+998    	; 0x408 <__bad_interrupt>
  22:	f2 c1       	rjmp	.+996    	; 0x408 <__bad_interrupt>
  24:	f1 c1       	rjmp	.+994    	; 0x408 <__bad_interrupt>

00000026 <Descriptors>:
  26:	06 00 00 00 06 00 06 00 06 00 0c 00 06 00 12 00     ................
  36:	06 00 18 00 06 00 1e 00 06 00 24 00 06 00 2a 00     ..........$...*.
  46:	06 00 30 00 06 00 36 00 06 00 3c 00 06 00 42 00     ..0...6...<...B.
  56:	06 00 48 00 06 00 4e 00 06 00 54 00 06 00 5a 00     ..H...N...T...Z.
  66:	06 00 60 00 06 00 66 00 06 00 6c 00 06 00 72 00     ..`...f...l...r.
  76:	06 00 78 00 06 00 7e 00 06 00 84 00 06 00 8a 00     ..x...~.........
  86:	06 00 90 00 06 00 96 00 06 00 9c 00 06 00 a2 00     ................
  96:	06 00 a8 00 06 00 ae 00 06 00 b4 00 06 00 ba 00     ................
  a6:	06 00 c0 00 06 00 c6 00 06 00 cc 00 06 00 d2 00     ................
  b6:	06 00 d8 00 06 00 de 00 06 00 e4 00 06 00 ea 00     ................
  c6:	06 00 f0 00 06 00 f6 00 06 00 fc 00 06 00 02 01     ................
  d6:	06 00 08 01 06 00 0e 01 06 00 14 01 06 00 1a 01     ................
  e6:	06 00 20 01 06 00 26 01 06 00 2c 01 06 00 32 01     .. ...&...,...2.
  f6:	06 00 38 01 06 00 3e 01 06 00 44 01 06 00 4a 01     ..8...>...D...J.
 106:	06 00 50 01 06 00 56 01 06 00 5c 01 06 00 62 01     ..P...V...\...b.
 116:	06 00 68 01 06 00 6e 01 06 00 74 01 00 00 00 00     ..h...n...t.....
 126:	06 00 7a 01 06 00 80 01 06 00 86 01 06 00 8c 01     ..z.............
 136:	06 00 92 01 06 00 98 01 06 00 9e 01 06 00 a4 01     ................
 146:	06 00 aa 01 06 00 b0 01 06 00 b6 01 06 00 bc 01     ................
 156:	06 00 c2 01 06 00 c8 01 06 00 ce 01 06 00 d4 01     ................
 166:	06 00 da 01 06 00 e0 01 06 00 e6 01 06 00 ec 01     ................
 176:	06 00 f2 01 06 00 f8 01 06 00 fe 01 06 00 04 02     ................
 186:	06 00 0a 02 06 00 10 02 06 00 16 02 06 00 1c 02     ................
 196:	06 00 22 02 06 00 28 02                             .."...(.

0000019e <Bitmaps>:
 19e:	00 00 00 5f 00 00 00 00 03 00 03 00 00 14 7f 14     ..._............
 1ae:	7f 14 00 24 2a 6b 2a 12 00 43 30 08 06 61 00 30     ...$*k*..C0..a.0
 1be:	4a 5d 32 48 00 00 00 03 00 00 00 1c 22 41 41 00     J]2H........"AA.
 1ce:	00 41 41 22 1c 00 00 05 02 02 05 00 00 10 10 7c     .AA"...........|
 1de:	10 10 00 00 00 e0 00 00 00 10 10 10 10 10 00 00     ................
 1ee:	00 60 00 00 00 40 30 08 06 01 00 3e 51 49 45 3e     .`...@0....>QIE>
 1fe:	00 40 42 7f 40 40 00 62 51 49 49 46 00 22 41 49     .@B.@@.bQIIF."AI
 20e:	49 36 00 18 14 12 11 7f 00 27 45 45 45 39 00 3c     I6.......'EEE9.<
 21e:	4a 49 49 30 00 03 01 71 09 07 00 36 49 49 49 36     JII0...q...6III6
 22e:	00 06 49 49 29 1e 00 00 00 66 00 00 00 00 00 e6     ..II)....f......
 23e:	00 00 00 08 14 22 41 00 00 24 24 24 24 24 00 41     ....."A..$$$$$.A
 24e:	22 14 08 00 00 02 01 51 09 06 3e 41 5d 5d 51 5e     "......Q..>A]]Q^
 25e:	00 7e 05 05 05 7e 00 7f 45 45 45 3a 00 3e 41 41     .~...~..EEE:.>AA
 26e:	41 22 00 7f 41 41 41 3e 00 7f 45 45 41 41 00 7f     A"..AAA>..EEAA..
 27e:	05 05 01 01 00 3e 41 45 45 3d 00 7f 04 04 04 7f     .....>AEE=......
 28e:	00 00 41 7f 41 00 00 20 40 40 40 3f 00 7f 04 04     ..A.A.. @@@?....
 29e:	0a 71 00 7f 40 40 40 40 00 7f 02 04 02 7f 00 7f     .q..@@@@........
 2ae:	02 04 08 7f 00 3e 41 41 41 3e 00 7f 05 05 05 02     .....>AAA>......
 2be:	00 3e 41 41 21 5e 00 7f 05 05 05 7a 00 22 45 45     .>AA!^.....z."EE
 2ce:	45 39 00 01 01 7f 01 01 00 3f 40 40 40 3f 00 0f     E9.......?@@@?..
 2de:	30 40 30 0f 00 7f 20 10 20 7f 00 71 0a 04 0a 71     0@0... . ..q...q
 2ee:	00 01 02 7c 02 01 00 61 51 49 45 43 00 00 7f 41     ...|...aQIEC...A
 2fe:	41 00 00 01 06 08 30 40 00 00 41 41 7f 00 00 04     A.....0@..AA....
 30e:	02 01 02 04 00 80 80 80 80 80 00 20 54 54 54 78     ........... TTTx
 31e:	00 7f 48 44 44 38 00 38 44 44 44 28 00 38 44 44     ..HDD8.8DDD(.8DD
 32e:	48 7f 00 38 54 54 54 58 00 04 7e 05 05 00 00 98     H..8TTTX..~.....
 33e:	a4 a4 a4 7c 00 7f 08 04 04 78 00 00 00 7d 00 00     ...|.....x...}..
 34e:	00 60 80 80 80 7d 00 7f 10 28 44 00 00 00 3f 40     .`...}...(D...?@
 35e:	00 00 00 7c 04 18 04 78 00 7c 04 04 04 78 00 38     ...|...x.|...x.8
 36e:	44 44 44 38 00 fc 28 24 24 18 00 18 24 24 28 fc     DDD8..($$...$$(.
 37e:	00 7c 08 04 04 08 00 48 54 54 54 24 00 00 02 3f     .|.....HTTT$...?
 38e:	42 00 00 3c 40 40 40 7c 00 1c 20 40 20 1c 00 3c     B..<@@@|.. @ ..<
 39e:	40 70 40 7c 00 44 28 10 28 44 00 9c a0 a0 a0 7c     @p@|.D(.(D.....|
 3ae:	00 44 64 54 4c 44 00 08 36 41 41 00 00 00 00 ff     .DdTLD..6AA.....
 3be:	00 00 00 41 41 36 08 00 02 01 01 02 02 01           ...AA6........

000003cc <letter_A>:
 3cc:	6f 6b 6c 61 63 68 6f 6d 61 00                       oklachoma.

000003d6 <first_check>:
 3d6:	52 6f 7a 6d 69 61 72 20 70 61 6d 69 65 63 69 3a     Rozmiar pamieci:
 3e6:	20 00                                                .

000003e8 <__ctors_end>:
 3e8:	11 24       	eor	r1, r1
 3ea:	1f be       	out	0x3f, r1	; 63
 3ec:	cf e5       	ldi	r28, 0x5F	; 95
 3ee:	d4 e0       	ldi	r29, 0x04	; 4
 3f0:	de bf       	out	0x3e, r29	; 62
 3f2:	cd bf       	out	0x3d, r28	; 61

000003f4 <__do_clear_bss>:
 3f4:	22 e0       	ldi	r18, 0x02	; 2
 3f6:	a0 e6       	ldi	r26, 0x60	; 96
 3f8:	b0 e0       	ldi	r27, 0x00	; 0
 3fa:	01 c0       	rjmp	.+2      	; 0x3fe <.do_clear_bss_start>

000003fc <.do_clear_bss_loop>:
 3fc:	1d 92       	st	X+, r1

000003fe <.do_clear_bss_start>:
 3fe:	a5 36       	cpi	r26, 0x65	; 101
 400:	b2 07       	cpc	r27, r18
 402:	e1 f7       	brne	.-8      	; 0x3fc <.do_clear_bss_loop>
 404:	aa d1       	rcall	.+852    	; 0x75a <main>
 406:	19 c2       	rjmp	.+1074   	; 0x83a <_exit>

00000408 <__bad_interrupt>:
 408:	fb cd       	rjmp	.-1034   	; 0x0 <__vectors>

0000040a <from_mem_to_dis>:
#include "SSD1306.h"
#include "IP12B512x.h"


void from_mem_to_dis(int scrn)
{
 40a:	0f 93       	push	r16
 40c:	1f 93       	push	r17
 40e:	cf 93       	push	r28
 410:	df 93       	push	r29
	scrn--;
 412:	ec 01       	movw	r28, r24
 414:	21 97       	sbiw	r28, 0x01	; 1
 416:	8c 01       	movw	r16, r24
 418:	01 5e       	subi	r16, 0xE1	; 225
 41a:	1f 4f       	sbci	r17, 0xFF	; 255
	for(int i = 0; i < 8; i++)
	{
		IP12B512x_read_4pages_from_memory(scrn+(i*4));
 41c:	ce 01       	movw	r24, r28
 41e:	6a d0       	rcall	.+212    	; 0x4f4 <IP12B512x_read_4pages_from_memory>
		ssd1306_printstring(buff1);
 420:	83 ee       	ldi	r24, 0xE3	; 227
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	46 d1       	rcall	.+652    	; 0x6b2 <ssd1306_printstring>
 426:	24 96       	adiw	r28, 0x04	; 4


void from_mem_to_dis(int scrn)
{
	scrn--;
	for(int i = 0; i < 8; i++)
 428:	c0 17       	cp	r28, r16
 42a:	d1 07       	cpc	r29, r17
 42c:	b9 f7       	brne	.-18     	; 0x41c <from_mem_to_dis+0x12>
		IP12B512x_read_4pages_from_memory(scrn+(i*4));
		ssd1306_printstring(buff1);
	}
	scrn++;
	return;
}
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	1f 91       	pop	r17
 434:	0f 91       	pop	r16
 436:	08 95       	ret

00000438 <IP12B512x_ini>:
		for(unsigned int i = 0; i < strlen(s_start); i++)
			counter += IP12B512x_printchar(s_start[i]);	
	}
	IP12B512x_SS_high();
	return counter;	
}
 438:	8c 9a       	sbi	0x11, 4	; 17
 43a:	94 9a       	sbi	0x12, 4	; 18
 43c:	08 95       	ret

0000043e <IP12B512x_check_memory>:
 43e:	94 98       	cbi	0x12, 4	; 18
 440:	8e e0       	ldi	r24, 0x0E	; 14
 442:	8f b9       	out	0x0f, r24	; 15
 444:	77 9b       	sbis	0x0e, 7	; 14
 446:	fe cf       	rjmp	.-4      	; 0x444 <IP12B512x_check_memory+0x6>
 448:	1f b8       	out	0x0f, r1	; 15
 44a:	77 9b       	sbis	0x0e, 7	; 14
 44c:	fe cf       	rjmp	.-4      	; 0x44a <IP12B512x_check_memory+0xc>
 44e:	8f b1       	in	r24, 0x0f	; 15
 450:	94 9a       	sbi	0x12, 4	; 18
 452:	81 30       	cpi	r24, 0x01	; 1
 454:	89 f0       	breq	.+34     	; 0x478 <__stack+0x19>
 456:	28 f0       	brcs	.+10     	; 0x462 <__stack+0x3>
 458:	82 30       	cpi	r24, 0x02	; 2
 45a:	41 f0       	breq	.+16     	; 0x46c <__stack+0xd>
 45c:	83 30       	cpi	r24, 0x03	; 3
 45e:	49 f0       	breq	.+18     	; 0x472 <__stack+0x13>
 460:	03 c0       	rjmp	.+6      	; 0x468 <__stack+0x9>
 462:	80 e4       	ldi	r24, 0x40	; 64
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	08 95       	ret
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	08 95       	ret
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	91 e0       	ldi	r25, 0x01	; 1
 470:	08 95       	ret
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	92 e0       	ldi	r25, 0x02	; 2
 476:	08 95       	ret
 478:	80 e8       	ldi	r24, 0x80	; 128
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	08 95       	ret

0000047e <IP12B512x_set_status_register>:
 47e:	94 98       	cbi	0x12, 4	; 18
 480:	91 e0       	ldi	r25, 0x01	; 1
 482:	9f b9       	out	0x0f, r25	; 15
 484:	77 9b       	sbis	0x0e, 7	; 14
 486:	fe cf       	rjmp	.-4      	; 0x484 <IP12B512x_set_status_register+0x6>
 488:	8f b9       	out	0x0f, r24	; 15
 48a:	77 9b       	sbis	0x0e, 7	; 14
 48c:	fe cf       	rjmp	.-4      	; 0x48a <IP12B512x_set_status_register+0xc>
 48e:	94 9a       	sbi	0x12, 4	; 18
 490:	08 95       	ret

00000492 <IP12B512x_write_string_to_memory_P>:
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
 496:	61 15       	cp	r22, r1
 498:	28 e0       	ldi	r18, 0x08	; 8
 49a:	72 07       	cpc	r23, r18
 49c:	38 f5       	brcc	.+78     	; 0x4ec <IP12B512x_write_string_to_memory_P+0x5a>
 49e:	40 32       	cpi	r20, 0x20	; 32
 4a0:	51 05       	cpc	r21, r1
 4a2:	20 f5       	brcc	.+72     	; 0x4ec <IP12B512x_write_string_to_memory_P+0x5a>
 4a4:	66 0f       	add	r22, r22
 4a6:	77 1f       	adc	r23, r23
 4a8:	62 95       	swap	r22
 4aa:	72 95       	swap	r23
 4ac:	70 7f       	andi	r23, 0xF0	; 240
 4ae:	76 27       	eor	r23, r22
 4b0:	60 7f       	andi	r22, 0xF0	; 240
 4b2:	76 27       	eor	r23, r22
 4b4:	64 0f       	add	r22, r20
 4b6:	75 1f       	adc	r23, r21
 4b8:	94 98       	cbi	0x12, 4	; 18
 4ba:	22 e0       	ldi	r18, 0x02	; 2
 4bc:	2f b9       	out	0x0f, r18	; 15
 4be:	77 9b       	sbis	0x0e, 7	; 14
 4c0:	fe cf       	rjmp	.-4      	; 0x4be <IP12B512x_write_string_to_memory_P+0x2c>
 4c2:	1f b8       	out	0x0f, r1	; 15
 4c4:	77 9b       	sbis	0x0e, 7	; 14
 4c6:	fe cf       	rjmp	.-4      	; 0x4c4 <IP12B512x_write_string_to_memory_P+0x32>
 4c8:	6f b9       	out	0x0f, r22	; 15
 4ca:	77 9b       	sbis	0x0e, 7	; 14
 4cc:	fe cf       	rjmp	.-4      	; 0x4ca <IP12B512x_write_string_to_memory_P+0x38>
 4ce:	ec 01       	movw	r28, r24
 4d0:	78 d1       	rcall	.+752    	; 0x7c2 <__strlen_P>
 4d2:	fe 01       	movw	r30, r28
 4d4:	9e 01       	movw	r18, r28
 4d6:	28 0f       	add	r18, r24
 4d8:	39 1f       	adc	r19, r25
 4da:	04 c0       	rjmp	.+8      	; 0x4e4 <IP12B512x_write_string_to_memory_P+0x52>
 4dc:	95 91       	lpm	r25, Z+
 4de:	9f b9       	out	0x0f, r25	; 15
 4e0:	77 9b       	sbis	0x0e, 7	; 14
 4e2:	fe cf       	rjmp	.-4      	; 0x4e0 <IP12B512x_write_string_to_memory_P+0x4e>
 4e4:	e2 17       	cp	r30, r18
 4e6:	f3 07       	cpc	r31, r19
 4e8:	c9 f7       	brne	.-14     	; 0x4dc <IP12B512x_write_string_to_memory_P+0x4a>
 4ea:	94 9a       	sbi	0x12, 4	; 18
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	08 95       	ret

000004f4 <IP12B512x_read_4pages_from_memory>:
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	ec 01       	movw	r28, r24
 4fa:	81 e4       	ldi	r24, 0x41	; 65
 4fc:	c0 df       	rcall	.-128    	; 0x47e <IP12B512x_set_status_register>
 4fe:	c1 15       	cp	r28, r1
 500:	88 e0       	ldi	r24, 0x08	; 8
 502:	d8 07       	cpc	r29, r24
 504:	10 f5       	brcc	.+68     	; 0x54a <IP12B512x_read_4pages_from_memory+0x56>
 506:	cc 0f       	add	r28, r28
 508:	dd 1f       	adc	r29, r29
 50a:	c2 95       	swap	r28
 50c:	d2 95       	swap	r29
 50e:	d0 7f       	andi	r29, 0xF0	; 240
 510:	dc 27       	eor	r29, r28
 512:	c0 7f       	andi	r28, 0xF0	; 240
 514:	dc 27       	eor	r29, r28
 516:	94 98       	cbi	0x12, 4	; 18
 518:	83 e0       	ldi	r24, 0x03	; 3
 51a:	8f b9       	out	0x0f, r24	; 15
 51c:	77 9b       	sbis	0x0e, 7	; 14
 51e:	fe cf       	rjmp	.-4      	; 0x51c <IP12B512x_read_4pages_from_memory+0x28>
 520:	1f b8       	out	0x0f, r1	; 15
 522:	77 9b       	sbis	0x0e, 7	; 14
 524:	fe cf       	rjmp	.-4      	; 0x522 <IP12B512x_read_4pages_from_memory+0x2e>
 526:	cf b9       	out	0x0f, r28	; 15
 528:	77 9b       	sbis	0x0e, 7	; 14
 52a:	fe cf       	rjmp	.-4      	; 0x528 <IP12B512x_read_4pages_from_memory+0x34>
 52c:	e3 ee       	ldi	r30, 0xE3	; 227
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	23 e6       	ldi	r18, 0x63	; 99
 532:	31 e0       	ldi	r19, 0x01	; 1
 534:	1f b8       	out	0x0f, r1	; 15
 536:	77 9b       	sbis	0x0e, 7	; 14
 538:	fe cf       	rjmp	.-4      	; 0x536 <IP12B512x_read_4pages_from_memory+0x42>
 53a:	8f b1       	in	r24, 0x0f	; 15
 53c:	81 93       	st	Z+, r24
 53e:	e2 17       	cp	r30, r18
 540:	f3 07       	cpc	r31, r19
 542:	c1 f7       	brne	.-16     	; 0x534 <IP12B512x_read_4pages_from_memory+0x40>
 544:	94 9a       	sbi	0x12, 4	; 18
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	01 c0       	rjmp	.+2      	; 0x54c <IP12B512x_read_4pages_from_memory+0x58>
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	df 91       	pop	r29
 54e:	cf 91       	pop	r28
 550:	08 95       	ret

00000552 <IP12B512x_create_virtual_screen>:

int IP12B512x_create_virtual_screen(void)
{
	number_of_screens++;
 552:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 556:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 55a:	9c 01       	movw	r18, r24
 55c:	2f 5f       	subi	r18, 0xFF	; 255
 55e:	3f 4f       	sbci	r19, 0xFF	; 255
 560:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <_edata+0x1>
 564:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <_edata>
	return (number_of_screens - 1) * 32;
}
 568:	88 0f       	add	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	82 95       	swap	r24
 56e:	92 95       	swap	r25
 570:	90 7f       	andi	r25, 0xF0	; 240
 572:	98 27       	eor	r25, r24
 574:	80 7f       	andi	r24, 0xF0	; 240
 576:	98 27       	eor	r25, r24
 578:	08 95       	ret

0000057a <ssd1306_spiini>:

/* inicjalizacja protoklolu SPI */

void ssd1306_spiini(void)
{
	DDRD |= (1 << PD7); // Ustaw D/C# (PD7) na wyjscie
 57a:	8f 9a       	sbi	0x11, 7	; 17
	
	
	DDRB |= (1 << PB0); // Ustaw RST (PB0) na wyjscie
 57c:	b8 9a       	sbi	0x17, 0	; 23
	PORTB |= (1 << PB0); // Ustaw RST na stan wysoki
 57e:	c0 9a       	sbi	0x18, 0	; 24
		
	
	DDRB |= (1 << PB2); // SS na wyjscie
 580:	ba 9a       	sbi	0x17, 2	; 23
	PORTB |= (1 << PB2); // SS stan wysoki
 582:	c2 9a       	sbi	0x18, 2	; 24
	
	
	DDRB |= (1 << PB3) | (1 << PB5); //MOSI i SCK na wyjscie
 584:	87 b3       	in	r24, 0x17	; 23
 586:	88 62       	ori	r24, 0x28	; 40
 588:	87 bb       	out	0x17, r24	; 23
			
	
	SPCR |= (1 << MSTR); //Wlacz tryb Master
 58a:	6c 9a       	sbi	0x0d, 4	; 13
	SPCR |= (1 << CPHA) | (1 << CPOL); //Ustawienie transmisji danych
 58c:	8d b1       	in	r24, 0x0d	; 13
 58e:	8c 60       	ori	r24, 0x0C	; 12
 590:	8d b9       	out	0x0d, r24	; 13
	SPSR |= (1 << SPI2X); // Przyspieszenie transmisji
 592:	70 9a       	sbi	0x0e, 0	; 14
	SPCR |= (1 << SPR0); // Preskaler 2
 594:	68 9a       	sbi	0x0d, 0	; 13
	SPCR |= (1 << SPE);	// Wlaczenie SPI	
 596:	6e 9a       	sbi	0x0d, 6	; 13
 598:	08 95       	ret

0000059a <ssd1306_enable_charge_pump>:
	PORTD |= (1 << PD7);
}

inline void ssd1306_DC_low(void) // D/#C - PD7 
{
	PORTD &= ~(1 << PD7);	
 59a:	97 98       	cbi	0x12, 7	; 18
	PORTB |= (1 << PB2);
}

inline void ssd1306_SS_low(void)
{
	PORTB &= ~(1 << PB2);
 59c:	c2 98       	cbi	0x18, 2	; 24

void ssd1306_enable_charge_pump(void)
{
	ssd1306_DC_low();
	ssd1306_SS_low();
	SPDR = CHARGE_PUMP;
 59e:	8d e8       	ldi	r24, 0x8D	; 141
 5a0:	8f b9       	out	0x0f, r24	; 15
	PORTB &= ~(1 << PB2);
}

inline void ssd1306_spi_transmision_end(void)
{
	while(!(SPSR & (1 << SPIF)));
 5a2:	77 9b       	sbis	0x0e, 7	; 14
 5a4:	fe cf       	rjmp	.-4      	; 0x5a2 <ssd1306_enable_charge_pump+0x8>
{
	ssd1306_DC_low();
	ssd1306_SS_low();
	SPDR = CHARGE_PUMP;
	ssd1306_spi_transmision_end();
	SPDR = CHARGE_PUMP_ENABLE;
 5a6:	84 e1       	ldi	r24, 0x14	; 20
 5a8:	8f b9       	out	0x0f, r24	; 15
	PORTB &= ~(1 << PB2);
}

inline void ssd1306_spi_transmision_end(void)
{
	while(!(SPSR & (1 << SPIF)));
 5aa:	77 9b       	sbis	0x0e, 7	; 14
 5ac:	fe cf       	rjmp	.-4      	; 0x5aa <ssd1306_enable_charge_pump+0x10>
	PORTD &= ~(1 << PD7);	
}

inline void ssd1306_SS_high(void)
{
	PORTB |= (1 << PB2);
 5ae:	c2 9a       	sbi	0x18, 2	; 24
 5b0:	08 95       	ret

000005b2 <ssd1306_display_on>:
	PORTD |= (1 << PD7);
}

inline void ssd1306_DC_low(void) // D/#C - PD7 
{
	PORTD &= ~(1 << PD7);	
 5b2:	97 98       	cbi	0x12, 7	; 18
	PORTB |= (1 << PB2);
}

inline void ssd1306_SS_low(void)
{
	PORTB &= ~(1 << PB2);
 5b4:	c2 98       	cbi	0x18, 2	; 24

void ssd1306_display_on(void)
{
	ssd1306_DC_low();
	ssd1306_SS_low();
	SPDR = DISPLAY_ON_NORMAL;
 5b6:	8f ea       	ldi	r24, 0xAF	; 175
 5b8:	8f b9       	out	0x0f, r24	; 15
	PORTB &= ~(1 << PB2);
}

inline void ssd1306_spi_transmision_end(void)
{
	while(!(SPSR & (1 << SPIF)));
 5ba:	77 9b       	sbis	0x0e, 7	; 14
 5bc:	fe cf       	rjmp	.-4      	; 0x5ba <ssd1306_display_on+0x8>
	PORTD &= ~(1 << PD7);	
}

inline void ssd1306_SS_high(void)
{
	PORTB |= (1 << PB2);
 5be:	c2 9a       	sbi	0x18, 2	; 24
 5c0:	08 95       	ret

000005c2 <ssd1306_ini>:

/* inicjalizacja wyswietlacza */

void ssd1306_ini(void)
{
	ssd1306_enable_charge_pump();
 5c2:	eb df       	rcall	.-42     	; 0x59a <ssd1306_enable_charge_pump>
	ssd1306_display_on();
 5c4:	f6 df       	rcall	.-20     	; 0x5b2 <ssd1306_display_on>
 5c6:	08 95       	ret

000005c8 <ssd1306_setpage>:
	PORTD |= (1 << PD7);
}

inline void ssd1306_DC_low(void) // D/#C - PD7 
{
	PORTD &= ~(1 << PD7);	
 5c8:	97 98       	cbi	0x12, 7	; 18
	PORTB |= (1 << PB2);
}

inline void ssd1306_SS_low(void)
{
	PORTB &= ~(1 << PB2);
 5ca:	c2 98       	cbi	0x18, 2	; 24

void ssd1306_setpage(char p_num_start, char p_num_end) // Wybieranie zakresu page na wyswietlaczu,  p_num_start - poczatek zakresu (0-7), p_num_end - koniec zakresu (0-7)
{
	ssd1306_DC_low();
	ssd1306_SS_low();
	SPDR = SET_PAGE_ADDRESS;
 5cc:	92 e2       	ldi	r25, 0x22	; 34
 5ce:	9f b9       	out	0x0f, r25	; 15
	PORTB &= ~(1 << PB2);
}

inline void ssd1306_spi_transmision_end(void)
{
	while(!(SPSR & (1 << SPIF)));
 5d0:	77 9b       	sbis	0x0e, 7	; 14
 5d2:	fe cf       	rjmp	.-4      	; 0x5d0 <ssd1306_setpage+0x8>
{
	ssd1306_DC_low();
	ssd1306_SS_low();
	SPDR = SET_PAGE_ADDRESS;
	ssd1306_spi_transmision_end();
	SPDR = p_num_start;
 5d4:	8f b9       	out	0x0f, r24	; 15
	PORTB &= ~(1 << PB2);
}

inline void ssd1306_spi_transmision_end(void)
{
	while(!(SPSR & (1 << SPIF)));
 5d6:	77 9b       	sbis	0x0e, 7	; 14
 5d8:	fe cf       	rjmp	.-4      	; 0x5d6 <ssd1306_setpage+0xe>
	ssd1306_SS_low();
	SPDR = SET_PAGE_ADDRESS;
	ssd1306_spi_transmision_end();
	SPDR = p_num_start;
	ssd1306_spi_transmision_end();
	SPDR = p_num_end;
 5da:	6f b9       	out	0x0f, r22	; 15
	PORTB &= ~(1 << PB2);
}

inline void ssd1306_spi_transmision_end(void)
{
	while(!(SPSR & (1 << SPIF)));
 5dc:	77 9b       	sbis	0x0e, 7	; 14
 5de:	fe cf       	rjmp	.-4      	; 0x5dc <ssd1306_setpage+0x14>
	PORTD &= ~(1 << PD7);	
}

inline void ssd1306_SS_high(void)
{
	PORTB |= (1 << PB2);
 5e0:	c2 9a       	sbi	0x18, 2	; 24
 5e2:	08 95       	ret

000005e4 <ssd1306_setcolumn>:
	PORTD |= (1 << PD7);
}

inline void ssd1306_DC_low(void) // D/#C - PD7 
{
	PORTD &= ~(1 << PD7);	
 5e4:	97 98       	cbi	0x12, 7	; 18
	PORTB |= (1 << PB2);
}

inline void ssd1306_SS_low(void)
{
	PORTB &= ~(1 << PB2);
 5e6:	c2 98       	cbi	0x18, 2	; 24

void ssd1306_setcolumn(char c_num_start, char c_num_end) // Wybieranie zakresu kolumn na wyswietlaczu,  c_num_start - poczatek zakresu (0-127), c_num_end - koniec zakresu (0-127)
{
	ssd1306_DC_low();
	ssd1306_SS_low();
	SPDR = SET_COLUMN_ADDRESS;
 5e8:	91 e2       	ldi	r25, 0x21	; 33
 5ea:	9f b9       	out	0x0f, r25	; 15
	PORTB &= ~(1 << PB2);
}

inline void ssd1306_spi_transmision_end(void)
{
	while(!(SPSR & (1 << SPIF)));
 5ec:	77 9b       	sbis	0x0e, 7	; 14
 5ee:	fe cf       	rjmp	.-4      	; 0x5ec <ssd1306_setcolumn+0x8>
{
	ssd1306_DC_low();
	ssd1306_SS_low();
	SPDR = SET_COLUMN_ADDRESS;
	ssd1306_spi_transmision_end();
	SPDR = c_num_start;
 5f0:	8f b9       	out	0x0f, r24	; 15
	PORTB &= ~(1 << PB2);
}

inline void ssd1306_spi_transmision_end(void)
{
	while(!(SPSR & (1 << SPIF)));
 5f2:	77 9b       	sbis	0x0e, 7	; 14
 5f4:	fe cf       	rjmp	.-4      	; 0x5f2 <ssd1306_setcolumn+0xe>
	ssd1306_SS_low();
	SPDR = SET_COLUMN_ADDRESS;
	ssd1306_spi_transmision_end();
	SPDR = c_num_start;
	ssd1306_spi_transmision_end();
	SPDR = c_num_end;
 5f6:	6f b9       	out	0x0f, r22	; 15
	PORTB &= ~(1 << PB2);
}

inline void ssd1306_spi_transmision_end(void)
{
	while(!(SPSR & (1 << SPIF)));
 5f8:	77 9b       	sbis	0x0e, 7	; 14
 5fa:	fe cf       	rjmp	.-4      	; 0x5f8 <ssd1306_setcolumn+0x14>
	PORTD &= ~(1 << PD7);	
}

inline void ssd1306_SS_high(void)
{
	PORTB |= (1 << PB2);
 5fc:	c2 9a       	sbi	0x18, 2	; 24
 5fe:	08 95       	ret

00000600 <ssd1306_set_memory_addressing_mode>:
	PORTD |= (1 << PD7);
}

inline void ssd1306_DC_low(void) // D/#C - PD7 
{
	PORTD &= ~(1 << PD7);	
 600:	97 98       	cbi	0x12, 7	; 18
	PORTB |= (1 << PB2);
}

inline void ssd1306_SS_low(void)
{
	PORTB &= ~(1 << PB2);
 602:	c2 98       	cbi	0x18, 2	; 24
*/
void ssd1306_set_memory_addressing_mode(char type)
{
	ssd1306_DC_low();
	ssd1306_SS_low();
	SPDR = SET_MEMORY_ADDRESSING_MODE;
 604:	90 e2       	ldi	r25, 0x20	; 32
 606:	9f b9       	out	0x0f, r25	; 15
	PORTB &= ~(1 << PB2);
}

inline void ssd1306_spi_transmision_end(void)
{
	while(!(SPSR & (1 << SPIF)));
 608:	77 9b       	sbis	0x0e, 7	; 14
 60a:	fe cf       	rjmp	.-4      	; 0x608 <ssd1306_set_memory_addressing_mode+0x8>
{
	ssd1306_DC_low();
	ssd1306_SS_low();
	SPDR = SET_MEMORY_ADDRESSING_MODE;
	ssd1306_spi_transmision_end();
	SPDR = type;
 60c:	8f b9       	out	0x0f, r24	; 15
	PORTB &= ~(1 << PB2);
}

inline void ssd1306_spi_transmision_end(void)
{
	while(!(SPSR & (1 << SPIF)));
 60e:	77 9b       	sbis	0x0e, 7	; 14
 610:	fe cf       	rjmp	.-4      	; 0x60e <ssd1306_set_memory_addressing_mode+0xe>
	PORTD &= ~(1 << PD7);	
}

inline void ssd1306_SS_high(void)
{
	PORTB |= (1 << PB2);
 612:	c2 9a       	sbi	0x18, 2	; 24
 614:	08 95       	ret

00000616 <ssd1306_vizir>:
	ssd1306_SS_high();
}

void ssd1306_vizir(void) //Clean screen
{	
	ssd1306_set_memory_addressing_mode(HORIZONTAL_ADDRESSING_MODE);
 616:	80 e0       	ldi	r24, 0x00	; 0
 618:	f3 df       	rcall	.-26     	; 0x600 <ssd1306_set_memory_addressing_mode>
	ssd1306_setpage(0, 7);
 61a:	67 e0       	ldi	r22, 0x07	; 7
 61c:	80 e0       	ldi	r24, 0x00	; 0
 61e:	d4 df       	rcall	.-88     	; 0x5c8 <ssd1306_setpage>
	ssd1306_setcolumn(0, 127);
 620:	6f e7       	ldi	r22, 0x7F	; 127
 622:	80 e0       	ldi	r24, 0x00	; 0
 624:	df df       	rcall	.-66     	; 0x5e4 <ssd1306_setcolumn>
#include "SSD1306.h"
#include "IP12B512x.h"

inline void ssd1306_DC_high(void) // D/#C - PD7 
{
	PORTD |= (1 << PD7);
 626:	97 9a       	sbi	0x12, 7	; 18
	PORTB |= (1 << PB2);
}

inline void ssd1306_SS_low(void)
{
	PORTB &= ~(1 << PB2);
 628:	c2 98       	cbi	0x18, 2	; 24
 62a:	80 e0       	ldi	r24, 0x00	; 0
 62c:	94 e0       	ldi	r25, 0x04	; 4
	
	ssd1306_DC_high();
	ssd1306_SS_low();	
	for(int i = 0; i < 1024; i++)
	{
		SPDR = 0x0;
 62e:	1f b8       	out	0x0f, r1	; 15
	PORTB &= ~(1 << PB2);
}

inline void ssd1306_spi_transmision_end(void)
{
	while(!(SPSR & (1 << SPIF)));
 630:	77 9b       	sbis	0x0e, 7	; 14
 632:	fe cf       	rjmp	.-4      	; 0x630 <ssd1306_vizir+0x1a>
 634:	01 97       	sbiw	r24, 0x01	; 1
	ssd1306_setpage(0, 7);
	ssd1306_setcolumn(0, 127);
	
	ssd1306_DC_high();
	ssd1306_SS_low();	
	for(int i = 0; i < 1024; i++)
 636:	d9 f7       	brne	.-10     	; 0x62e <ssd1306_vizir+0x18>
	PORTD &= ~(1 << PD7);	
}

inline void ssd1306_SS_high(void)
{
	PORTB |= (1 << PB2);
 638:	c2 9a       	sbi	0x18, 2	; 24
 63a:	08 95       	ret

0000063c <ssd1306_printchar>:
#include "SSD1306.h"
#include "IP12B512x.h"

inline void ssd1306_DC_high(void) // D/#C - PD7 
{
	PORTD |= (1 << PD7);
 63c:	97 9a       	sbi	0x12, 7	; 18
	PORTB |= (1 << PB2);
}

inline void ssd1306_SS_low(void)
{
	PORTB &= ~(1 << PB2);
 63e:	c2 98       	cbi	0x18, 2	; 24

void ssd1306_printchar(char to_print) // Wyswietlanie pojedynczego znaku na ekranie
{
	ssd1306_DC_high();
	ssd1306_SS_low();
	int iteration = Descriptors[to_print - '!'][0];
 640:	28 2f       	mov	r18, r24
 642:	30 e0       	ldi	r19, 0x00	; 0
 644:	21 52       	subi	r18, 0x21	; 33
 646:	31 09       	sbc	r19, r1
 648:	f9 01       	movw	r30, r18
 64a:	ee 0f       	add	r30, r30
 64c:	ff 1f       	adc	r31, r31
 64e:	ee 0f       	add	r30, r30
 650:	ff 1f       	adc	r31, r31
 652:	ea 5d       	subi	r30, 0xDA	; 218
 654:	ff 4f       	sbci	r31, 0xFF	; 255
 656:	45 91       	lpm	r20, Z+
 658:	55 91       	lpm	r21, Z+
	int znak = (to_print - '!');
	if(znak >= -1)
 65a:	2f 3f       	cpi	r18, 0xFF	; 255
 65c:	9f ef       	ldi	r25, 0xFF	; 255
 65e:	39 07       	cpc	r19, r25
 660:	34 f1       	brlt	.+76     	; 0x6ae <ssd1306_printchar+0x72>
	{
		if(to_print == 32)
 662:	80 32       	cpi	r24, 0x20	; 32
 664:	21 f0       	breq	.+8      	; 0x66e <ssd1306_printchar+0x32>
			}
			
		}
		else
		{
			for(unsigned int i = 0; i < iteration; i++)
 666:	41 15       	cp	r20, r1
 668:	51 05       	cpc	r21, r1
 66a:	49 f4       	brne	.+18     	; 0x67e <ssd1306_printchar+0x42>
 66c:	20 c0       	rjmp	.+64     	; 0x6ae <ssd1306_printchar+0x72>
 66e:	85 e0       	ldi	r24, 0x05	; 5
 670:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(to_print == 32)
		{
			for(int i = 0; i<5;i++)
			{
				SPDR = 0x00;
 672:	1f b8       	out	0x0f, r1	; 15
	PORTB &= ~(1 << PB2);
}

inline void ssd1306_spi_transmision_end(void)
{
	while(!(SPSR & (1 << SPIF)));
 674:	77 9b       	sbis	0x0e, 7	; 14
 676:	fe cf       	rjmp	.-4      	; 0x674 <ssd1306_printchar+0x38>
 678:	01 97       	sbiw	r24, 0x01	; 1
	int znak = (to_print - '!');
	if(znak >= -1)
	{
		if(to_print == 32)
		{
			for(int i = 0; i<5;i++)
 67a:	d9 f7       	brne	.-10     	; 0x672 <ssd1306_printchar+0x36>
 67c:	18 c0       	rjmp	.+48     	; 0x6ae <ssd1306_printchar+0x72>
			}
			
		}
		else
		{
			for(unsigned int i = 0; i < iteration; i++)
 67e:	80 e0       	ldi	r24, 0x00	; 0
 680:	90 e0       	ldi	r25, 0x00	; 0
			{
				SPDR = Bitmaps[Descriptors[znak][1] + i];
 682:	f9 01       	movw	r30, r18
 684:	ee 0f       	add	r30, r30
 686:	ff 1f       	adc	r31, r31
 688:	ee 0f       	add	r30, r30
 68a:	ff 1f       	adc	r31, r31
 68c:	e8 5d       	subi	r30, 0xD8	; 216
 68e:	ff 4f       	sbci	r31, 0xFF	; 255
 690:	65 91       	lpm	r22, Z+
 692:	75 91       	lpm	r23, Z+
 694:	fc 01       	movw	r30, r24
 696:	e2 56       	subi	r30, 0x62	; 98
 698:	fe 4f       	sbci	r31, 0xFE	; 254
 69a:	e6 0f       	add	r30, r22
 69c:	f7 1f       	adc	r31, r23
 69e:	24 91       	lpm	r18, Z
 6a0:	2f b9       	out	0x0f, r18	; 15
	PORTB &= ~(1 << PB2);
}

inline void ssd1306_spi_transmision_end(void)
{
	while(!(SPSR & (1 << SPIF)));
 6a2:	77 9b       	sbis	0x0e, 7	; 14
 6a4:	fe cf       	rjmp	.-4      	; 0x6a2 <ssd1306_printchar+0x66>
			}
			
		}
		else
		{
			for(unsigned int i = 0; i < iteration; i++)
 6a6:	01 96       	adiw	r24, 0x01	; 1
 6a8:	84 17       	cp	r24, r20
 6aa:	95 07       	cpc	r25, r21
 6ac:	99 f7       	brne	.-26     	; 0x694 <ssd1306_printchar+0x58>
	PORTD &= ~(1 << PD7);	
}

inline void ssd1306_SS_high(void)
{
	PORTB |= (1 << PB2);
 6ae:	c2 9a       	sbi	0x18, 2	; 24
 6b0:	08 95       	ret

000006b2 <ssd1306_printstring>:
	}
	ssd1306_SS_high();
}

void ssd1306_printstring(char* s_start)
{
 6b2:	ef 92       	push	r14
 6b4:	ff 92       	push	r15
 6b6:	0f 93       	push	r16
 6b8:	1f 93       	push	r17
 6ba:	cf 93       	push	r28
 6bc:	df 93       	push	r29
 6be:	8c 01       	movw	r16, r24
 6c0:	7c 01       	movw	r14, r24
	for(unsigned int i = 0; i < strlen(s_start); i++)
 6c2:	c0 e0       	ldi	r28, 0x00	; 0
 6c4:	d0 e0       	ldi	r29, 0x00	; 0
 6c6:	05 c0       	rjmp	.+10     	; 0x6d2 <ssd1306_printstring+0x20>
		ssd1306_printchar(s_start[i]);
 6c8:	f7 01       	movw	r30, r14
 6ca:	81 91       	ld	r24, Z+
 6cc:	7f 01       	movw	r14, r30
 6ce:	b6 df       	rcall	.-148    	; 0x63c <ssd1306_printchar>
	ssd1306_SS_high();
}

void ssd1306_printstring(char* s_start)
{
	for(unsigned int i = 0; i < strlen(s_start); i++)
 6d0:	21 96       	adiw	r28, 0x01	; 1
 6d2:	f8 01       	movw	r30, r16
 6d4:	01 90       	ld	r0, Z+
 6d6:	00 20       	and	r0, r0
 6d8:	e9 f7       	brne	.-6      	; 0x6d4 <ssd1306_printstring+0x22>
 6da:	31 97       	sbiw	r30, 0x01	; 1
 6dc:	e0 1b       	sub	r30, r16
 6de:	f1 0b       	sbc	r31, r17
 6e0:	ce 17       	cp	r28, r30
 6e2:	df 07       	cpc	r29, r31
 6e4:	88 f3       	brcs	.-30     	; 0x6c8 <ssd1306_printstring+0x16>
		ssd1306_printchar(s_start[i]);
}
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	1f 91       	pop	r17
 6ec:	0f 91       	pop	r16
 6ee:	ff 90       	pop	r15
 6f0:	ef 90       	pop	r14
 6f2:	08 95       	ret

000006f4 <ssd1306_printstring_P>:

void ssd1306_printstring_P(const __flash char* s_start)
{
 6f4:	0f 93       	push	r16
 6f6:	1f 93       	push	r17
 6f8:	cf 93       	push	r28
 6fa:	df 93       	push	r29
 6fc:	8c 01       	movw	r16, r24
#else
extern size_t __strlen_P(const char *) __ATTR_CONST__;  /* internal helper function */
__attribute__((__always_inline__)) static __inline__ size_t strlen_P(const char * s);
static __inline__ size_t strlen_P(const char *s) {
  return __builtin_constant_p(__builtin_strlen(s))
     ? __builtin_strlen(s) : __strlen_P(s);
 6fe:	61 d0       	rcall	.+194    	; 0x7c2 <__strlen_P>
 700:	e8 01       	movw	r28, r16
 702:	08 0f       	add	r16, r24
 704:	19 1f       	adc	r17, r25
	for(unsigned int i = 0; i < strlen_P(s_start); i++)
 706:	04 c0       	rjmp	.+8      	; 0x710 <ssd1306_printstring_P+0x1c>
	ssd1306_printchar(s_start[i]);
 708:	fe 01       	movw	r30, r28
 70a:	21 96       	adiw	r28, 0x01	; 1
 70c:	85 91       	lpm	r24, Z+
 70e:	96 df       	rcall	.-212    	; 0x63c <ssd1306_printchar>
		ssd1306_printchar(s_start[i]);
}

void ssd1306_printstring_P(const __flash char* s_start)
{
	for(unsigned int i = 0; i < strlen_P(s_start); i++)
 710:	c0 17       	cp	r28, r16
 712:	d1 07       	cpc	r29, r17
 714:	c9 f7       	brne	.-14     	; 0x708 <ssd1306_printstring_P+0x14>
	ssd1306_printchar(s_start[i]);
}
 716:	df 91       	pop	r29
 718:	cf 91       	pop	r28
 71a:	1f 91       	pop	r17
 71c:	0f 91       	pop	r16
 71e:	08 95       	ret

00000720 <ssd1306_printnumber>:

void ssd1306_printnumber(long int number)
{
 720:	cf 93       	push	r28
 722:	df 93       	push	r29
 724:	cd b7       	in	r28, 0x3d	; 61
 726:	de b7       	in	r29, 0x3e	; 62
 728:	2b 97       	sbiw	r28, 0x0b	; 11
 72a:	0f b6       	in	r0, 0x3f	; 63
 72c:	f8 94       	cli
 72e:	de bf       	out	0x3e, r29	; 62
 730:	0f be       	out	0x3f, r0	; 63
 732:	cd bf       	out	0x3d, r28	; 61
 734:	dc 01       	movw	r26, r24
 736:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 738:	4a e0       	ldi	r20, 0x0A	; 10
 73a:	be 01       	movw	r22, r28
 73c:	6f 5f       	subi	r22, 0xFF	; 255
 73e:	7f 4f       	sbci	r23, 0xFF	; 255
 740:	49 d0       	rcall	.+146    	; 0x7d4 <__itoa_ncheck>
	char buff[11];	
	itoa(number, buff, 10);
	ssd1306_printstring(buff);	
 742:	ce 01       	movw	r24, r28
 744:	01 96       	adiw	r24, 0x01	; 1
 746:	b5 df       	rcall	.-150    	; 0x6b2 <ssd1306_printstring>
}
 748:	2b 96       	adiw	r28, 0x0b	; 11
 74a:	0f b6       	in	r0, 0x3f	; 63
 74c:	f8 94       	cli
 74e:	de bf       	out	0x3e, r29	; 62
 750:	0f be       	out	0x3f, r0	; 63
 752:	cd bf       	out	0x3d, r28	; 61
 754:	df 91       	pop	r29
 756:	cf 91       	pop	r28
 758:	08 95       	ret

0000075a <main>:

int main(void)
{
	char buff[5];
	
	ssd1306_spiini();
 75a:	0f df       	rcall	.-482    	; 0x57a <ssd1306_spiini>
	IP12B512x_ini();
 75c:	6d de       	rcall	.-806    	; 0x438 <IP12B512x_ini>
	
	ssd1306_ini();
 75e:	31 df       	rcall	.-414    	; 0x5c2 <ssd1306_ini>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 760:	2f ef       	ldi	r18, 0xFF	; 255
 762:	8f ef       	ldi	r24, 0xFF	; 255
 764:	9c e2       	ldi	r25, 0x2C	; 44
 766:	21 50       	subi	r18, 0x01	; 1
 768:	80 40       	sbci	r24, 0x00	; 0
 76a:	90 40       	sbci	r25, 0x00	; 0
 76c:	e1 f7       	brne	.-8      	; 0x766 <main+0xc>
 76e:	00 c0       	rjmp	.+0      	; 0x770 <main+0x16>
 770:	00 00       	nop
	_delay_ms(2000);
	ssd1306_vizir();
 772:	51 df       	rcall	.-350    	; 0x616 <ssd1306_vizir>
	
	IP12B512x_ini();
 774:	61 de       	rcall	.-830    	; 0x438 <IP12B512x_ini>
 776:	2f ef       	ldi	r18, 0xFF	; 255
 778:	8f e7       	ldi	r24, 0x7F	; 127
 77a:	96 e1       	ldi	r25, 0x16	; 22
 77c:	21 50       	subi	r18, 0x01	; 1
 77e:	80 40       	sbci	r24, 0x00	; 0
 780:	90 40       	sbci	r25, 0x00	; 0
 782:	e1 f7       	brne	.-8      	; 0x77c <main+0x22>
 784:	00 c0       	rjmp	.+0      	; 0x786 <main+0x2c>
 786:	00 00       	nop
	
	_delay_ms(1000);
		
	ssd1306_vizir();
 788:	46 df       	rcall	.-372    	; 0x616 <ssd1306_vizir>
	
	ssd1306_printstring_P(first_check);
 78a:	86 ed       	ldi	r24, 0xD6	; 214
 78c:	93 e0       	ldi	r25, 0x03	; 3
 78e:	b2 df       	rcall	.-156    	; 0x6f4 <ssd1306_printstring_P>
	
	ssd1306_printnumber(IP12B512x_check_memory());
 790:	56 de       	rcall	.-852    	; 0x43e <IP12B512x_check_memory>
 792:	bc 01       	movw	r22, r24
 794:	99 0f       	add	r25, r25
 796:	88 0b       	sbc	r24, r24
 798:	99 0b       	sbc	r25, r25
 79a:	c2 df       	rcall	.-124    	; 0x720 <ssd1306_printnumber>

	IP12B512x_set_status_register(BYTE_MODE);
 79c:	81 e0       	ldi	r24, 0x01	; 1
 79e:	6f de       	rcall	.-802    	; 0x47e <IP12B512x_set_status_register>
	
	virtual_screen[0] = IP12B512x_create_virtual_screen();
 7a0:	d8 de       	rcall	.-592    	; 0x552 <IP12B512x_create_virtual_screen>
 7a2:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <virtual_screen+0x1>
 7a6:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <virtual_screen>

	ssd1306_vizir();
 7aa:	35 df       	rcall	.-406    	; 0x616 <ssd1306_vizir>
	IP12B512x_write_string_to_memory_P(letter_A, 1, 0);
 7ac:	40 e0       	ldi	r20, 0x00	; 0
 7ae:	50 e0       	ldi	r21, 0x00	; 0
 7b0:	61 e0       	ldi	r22, 0x01	; 1
 7b2:	70 e0       	ldi	r23, 0x00	; 0
 7b4:	8c ec       	ldi	r24, 0xCC	; 204
 7b6:	93 e0       	ldi	r25, 0x03	; 3
 7b8:	6c de       	rcall	.-808    	; 0x492 <IP12B512x_write_string_to_memory_P>
	from_mem_to_dis(1);
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	25 de       	rcall	.-950    	; 0x40a <from_mem_to_dis>
	
	
    while(1)
    {
        
    }
 7c0:	ff cf       	rjmp	.-2      	; 0x7c0 <main+0x66>

000007c2 <__strlen_P>:
 7c2:	fc 01       	movw	r30, r24
 7c4:	05 90       	lpm	r0, Z+
 7c6:	00 20       	and	r0, r0
 7c8:	e9 f7       	brne	.-6      	; 0x7c4 <__strlen_P+0x2>
 7ca:	80 95       	com	r24
 7cc:	90 95       	com	r25
 7ce:	8e 0f       	add	r24, r30
 7d0:	9f 1f       	adc	r25, r31
 7d2:	08 95       	ret

000007d4 <__itoa_ncheck>:
 7d4:	bb 27       	eor	r27, r27
 7d6:	4a 30       	cpi	r20, 0x0A	; 10
 7d8:	31 f4       	brne	.+12     	; 0x7e6 <__itoa_ncheck+0x12>
 7da:	99 23       	and	r25, r25
 7dc:	22 f4       	brpl	.+8      	; 0x7e6 <__itoa_ncheck+0x12>
 7de:	bd e2       	ldi	r27, 0x2D	; 45
 7e0:	90 95       	com	r25
 7e2:	81 95       	neg	r24
 7e4:	9f 4f       	sbci	r25, 0xFF	; 255
 7e6:	01 c0       	rjmp	.+2      	; 0x7ea <__utoa_common>

000007e8 <__utoa_ncheck>:
 7e8:	bb 27       	eor	r27, r27

000007ea <__utoa_common>:
 7ea:	fb 01       	movw	r30, r22
 7ec:	55 27       	eor	r21, r21
 7ee:	aa 27       	eor	r26, r26
 7f0:	88 0f       	add	r24, r24
 7f2:	99 1f       	adc	r25, r25
 7f4:	aa 1f       	adc	r26, r26
 7f6:	a4 17       	cp	r26, r20
 7f8:	10 f0       	brcs	.+4      	; 0x7fe <__utoa_common+0x14>
 7fa:	a4 1b       	sub	r26, r20
 7fc:	83 95       	inc	r24
 7fe:	50 51       	subi	r21, 0x10	; 16
 800:	b9 f7       	brne	.-18     	; 0x7f0 <__utoa_common+0x6>
 802:	a0 5d       	subi	r26, 0xD0	; 208
 804:	aa 33       	cpi	r26, 0x3A	; 58
 806:	08 f0       	brcs	.+2      	; 0x80a <__utoa_common+0x20>
 808:	a9 5d       	subi	r26, 0xD9	; 217
 80a:	a1 93       	st	Z+, r26
 80c:	00 97       	sbiw	r24, 0x00	; 0
 80e:	79 f7       	brne	.-34     	; 0x7ee <__utoa_common+0x4>
 810:	b1 11       	cpse	r27, r1
 812:	b1 93       	st	Z+, r27
 814:	11 92       	st	Z+, r1
 816:	cb 01       	movw	r24, r22
 818:	00 c0       	rjmp	.+0      	; 0x81a <strrev>

0000081a <strrev>:
 81a:	dc 01       	movw	r26, r24
 81c:	fc 01       	movw	r30, r24
 81e:	67 2f       	mov	r22, r23
 820:	71 91       	ld	r23, Z+
 822:	77 23       	and	r23, r23
 824:	e1 f7       	brne	.-8      	; 0x81e <strrev+0x4>
 826:	32 97       	sbiw	r30, 0x02	; 2
 828:	04 c0       	rjmp	.+8      	; 0x832 <strrev+0x18>
 82a:	7c 91       	ld	r23, X
 82c:	6d 93       	st	X+, r22
 82e:	70 83       	st	Z, r23
 830:	62 91       	ld	r22, -Z
 832:	ae 17       	cp	r26, r30
 834:	bf 07       	cpc	r27, r31
 836:	c8 f3       	brcs	.-14     	; 0x82a <strrev+0x10>
 838:	08 95       	ret

0000083a <_exit>:
 83a:	f8 94       	cli

0000083c <__stop_program>:
 83c:	ff cf       	rjmp	.-2      	; 0x83c <__stop_program>
